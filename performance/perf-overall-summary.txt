|        |              |         | RESPONSE TIMES: 95th Percentile per property* (milliseconds; .001 microsecond) =>                                                                                                                      |
| fos v  |   platform   | node v  | af1 | af2 | f1  | f2  | f3  | f4  | f5  | f6  | f7  | f8  | f9  | f10 | f11 | f12 | f13 | f14 | ms1 | ms2 | ms3 | ms4 | m1  | m2  | m3  | m4  | m5  | m6  | m7  | m8  | m9  | m10 | m11 | m12 | rm1 | rm2 | rm3 | rm4 | rm5 | rm6 | rm7 | rm8 |Filename (test grouping)                                                        |
|--------|--------------|---------|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|--------------------------------------------------------------------------------|
| 1.0.0  |    win32     |  4.4.3  |  0.1|  0.2|  0.2|  1.1|     |  0.5|  8.5|  7.9|  2.3|  5.0|  8.5|  5.7|  7.5|  4.2|  3.4|  1.7|104.6|192.5|105.6|131.7| 10.8|  8.0| 13.5|  8.2| 18.8| 13.8|  6.2|  5.9|  2.9|  7.1| 15.0|  5.5| 42.7| 37.6| 41.3| 28.0| 18.4| 16.4| 13.8| 11.4|2016-05-04_win32_v1.0.0_node-v4.4.3_v100to1k_1462351998872.json                 |
| 1.0.0  |    win32     |  4.4.3  |  0.1|  2.1|  0.1|  0.8|  0.6|  0.5|  8.1| 14.1|  4.0| 12.8|  7.5|  7.8|  6.5|  2.7|  2.4|  2.4|187.4| 89.5| 76.4|142.7|  7.0|  6.2|  7.9|  8.8|117.9| 15.8|  7.1|  6.2|  5.1|  8.8| 11.0| 11.8| 75.4| 32.1| 18.8| 45.1| 22.0|  8.3|  5.1|  8.7|2016-05-04_win32_v1.0.0_node-v4.4.3_v100to1k_1462353701196.json                 |

Response times are the 95th percentile (95% of responses are faster) for all matches or filters 
performed for each test shown divided by the number of properties being checked for a match. 
This allows a consistent way of looking at response times across all tests regardless if a match was for one property or 1000.

For example a match test of 5 properties tested 100 times: 
  If 95 of the tests responded in 20.0 milliseconds or faster, (regardless of whether match was true or false)
  then the number displayed here would be 4.0 (20.0 / 5 properties.)

af1 : filterJsArray_k1to100_fixedKey_k1d_v1kto1k
af2 : filterJsArray_k1to100_fixedKey_k4d_v1kto1k
f1 : filter_k100to100_m100_v100to100
f2 : filter_k10to100_m50_v100to100
f3 : filter_k10to100_m50_v1kto10k
f4 : filter_k10to100_m50_v1kto1k
f5 : filter_k1to100_charDotStar_v1kto100
f6 : filter_k1to100_charDotStar_v1kto1k
f7 : filter_k1to100_fixedKey_k1d_v1kto1k
f8 : filter_k1to100_fixedKey_k4d_v1kto1k
f9 : filter_k1to100_m50_v100to100
f10 : filter_k1to100_m50_v1kto1k
f11 : filter_k1to1_pRegDotStar_tWord_m50_v100to100
f12 : filter_k1to1_pRegDotStar_tWord_m50_v1kto1k
f13 : filter_k1to1_pWord_tWord_m50_v100to100
f14 : filter_k1to1_pWord_tWord_m50_v1kto1k
ms1 : matchSimple_k1to100_m50_v100to100
ms2 : matchSimple_k1to100_m50_v1kto1k
ms3 : matchSimple_k1to1_pWord_tWord_m50_v100to100
ms4 : matchSimple_k1to1_pWord_tWord_m50_v1kto1k
m1 : match_k100to100_m100_v100to100
m2 : match_k100to100_m100_v1kto1k
m3 : match_k10to100_m50_v100to100
m4 : match_k10to100_m50_v1kto1k
m5 : match_k1to100_m50_v100to100
m6 : match_k1to100_m50_v1kto1k
m7 : match_k1to1_pParagraph_tParagraph_m50_v100to100
m8 : match_k1to1_pParagraph_tParagraph_m50_v1kto1k
m9 : match_k1to1_pString_tString_m50_v100to100
m10 : match_k1to1_pString_tString_m50_v1kto1k
m11 : match_k1to1_pWord_tWord_m50_v100to100
m12 : match_k1to1_pWord_tWord_m50_v1kto1k
rm1 : regMatch_k1to1_pRegDotStar_tWord_m50_v100to100
rm2 : regMatch_k1to1_pRegDotStar_tWord_m50_v1kto1k
rm3 : regMatch_k1to1_pRegDot_tWord_m50_v100to100
rm4 : regMatch_k1to1_pRegDot_tWord_m50_v1kto1k
rm5 : regMatch_k1to1_pRegMidStr_tWord_m50_v100to100
rm6 : regMatch_k1to1_pRegMidStr_tWord_m50_v1kto1k
rm7 : regMatch_k1to1_pRegPhone_tPhone_m50_v100to100
rm8 : regMatch_k1to1_pRegPhone_tPhone_m50_v1kto1k


af1 : filterJsArray_k1to100_fixedKey_k1d_v1kto1k
   filterJsArr => filter test using straight js array filter without filter-objects
   k1to100     => 1 pObj property matched against 1 tObj prop in tObj of 100 properties
   fixedKey    => Every object in array of pObjs tests the same property key (but different value for each pObj & tObj)
   k1d         => Property key is 1 level deep
   v1kto1k     => volume 1,00: 1,00 unique pObj objects against 1,000 unique tObj objects; filter tests filter each pObj to 1000 tObjs; match tests go 1:1
af2 : filterJsArray_k1to100_fixedKey_k4d_v1kto1k
   filterJsArr => filter test using straight js array filter without filter-objects
   k1to100     => 1 pObj property matched against 1 tObj prop in tObj of 100 properties
   fixedKey    => Every object in array of pObjs tests the same property key (but different value for each pObj & tObj)
   k4d         => Property key is 4 levels deep; eg type.tail.tip.color
   v1kto1k     => volume 1,00: 1,00 unique pObj objects against 1,000 unique tObj objects; filter tests filter each pObj to 1000 tObjs; match tests go 1:1
f1 : filter_k100to100_m100_v100to100
   filter      => filter test using makeFilterFn()
   k100to100   => 100 pObj properties matched against 100 tObj props in tObj of 100 properties
   m100        => 100% match between pObjs & tObjs
   v100to100   => volume 100: 100 unique pObj objects, 100 unique tObj objects; filter tests filter each pObj to 100 tObjs; match tests go 1:1
f2 : filter_k10to100_m50_v100to100
   filter      => filter test using makeFilterFn()
   k10to100    => 10 pObj properties matched against 10 tObj props in tObj of 100 properties
   m50         => ~50% match between pObjs & tObjs
   v100to100   => volume 100: 100 unique pObj objects, 100 unique tObj objects; filter tests filter each pObj to 100 tObjs; match tests go 1:1
f3 : filter_k10to100_m50_v1kto10k
   filter      => filter test using makeFilterFn()
   k10to100    => 10 pObj properties matched against 10 tObj props in tObj of 100 properties
   m50         => ~50% match between pObjs & tObjs
   v1kto10k    => null
f4 : filter_k10to100_m50_v1kto1k
   filter      => filter test using makeFilterFn()
   k10to100    => 10 pObj properties matched against 10 tObj props in tObj of 100 properties
   m50         => ~50% match between pObjs & tObjs
   v1kto1k     => volume 1,00: 1,00 unique pObj objects against 1,000 unique tObj objects; filter tests filter each pObj to 1000 tObjs; match tests go 1:1
f5 : filter_k1to100_charDotStar_v1kto100
   filter      => filter test using makeFilterFn()
   k1to100     => 1 pObj property matched against 1 tObj prop in tObj of 100 properties
   charDotStar => reg exp=>1 rand char followed by .* by 1 rand char eg /B.*l/
   v1kto100    => null
f6 : filter_k1to100_charDotStar_v1kto1k
   filter      => filter test using makeFilterFn()
   k1to100     => 1 pObj property matched against 1 tObj prop in tObj of 100 properties
   charDotStar => reg exp=>1 rand char followed by .* by 1 rand char eg /B.*l/
   v1kto1k     => volume 1,00: 1,00 unique pObj objects against 1,000 unique tObj objects; filter tests filter each pObj to 1000 tObjs; match tests go 1:1
f7 : filter_k1to100_fixedKey_k1d_v1kto1k
   filter      => filter test using makeFilterFn()
   k1to100     => 1 pObj property matched against 1 tObj prop in tObj of 100 properties
   fixedKey    => Every object in array of pObjs tests the same property key (but different value for each pObj & tObj)
   k1d         => Property key is 1 level deep
   v1kto1k     => volume 1,00: 1,00 unique pObj objects against 1,000 unique tObj objects; filter tests filter each pObj to 1000 tObjs; match tests go 1:1
f8 : filter_k1to100_fixedKey_k4d_v1kto1k
   filter      => filter test using makeFilterFn()
   k1to100     => 1 pObj property matched against 1 tObj prop in tObj of 100 properties
   fixedKey    => Every object in array of pObjs tests the same property key (but different value for each pObj & tObj)
   k4d         => Property key is 4 levels deep; eg type.tail.tip.color
   v1kto1k     => volume 1,00: 1,00 unique pObj objects against 1,000 unique tObj objects; filter tests filter each pObj to 1000 tObjs; match tests go 1:1
f9 : filter_k1to100_m50_v100to100
   filter      => filter test using makeFilterFn()
   k1to100     => 1 pObj property matched against 1 tObj prop in tObj of 100 properties
   m50         => ~50% match between pObjs & tObjs
   v100to100   => volume 100: 100 unique pObj objects, 100 unique tObj objects; filter tests filter each pObj to 100 tObjs; match tests go 1:1
f10 : filter_k1to100_m50_v1kto1k
   filter      => filter test using makeFilterFn()
   k1to100     => 1 pObj property matched against 1 tObj prop in tObj of 100 properties
   m50         => ~50% match between pObjs & tObjs
   v1kto1k     => volume 1,00: 1,00 unique pObj objects against 1,000 unique tObj objects; filter tests filter each pObj to 1000 tObjs; match tests go 1:1
f11 : filter_k1to1_pRegDotStar_tWord_m50_v100to100
   filter      => filter test using makeFilterFn()
   k1to1       => 1 pObj property matched to tObj with 1 property
   pRegDotStar => pObj has reg exp 1 rand char followed by .* by rand char eg /B.*l/
   tWord       => 3 to 10 random characters in tObj value
   m50         => ~50% match between pObjs & tObjs
   v100to100   => volume 100: 100 unique pObj objects, 100 unique tObj objects; filter tests filter each pObj to 100 tObjs; match tests go 1:1
f12 : filter_k1to1_pRegDotStar_tWord_m50_v1kto1k
   filter      => filter test using makeFilterFn()
   k1to1       => 1 pObj property matched to tObj with 1 property
   pRegDotStar => pObj has reg exp 1 rand char followed by .* by rand char eg /B.*l/
   tWord       => 3 to 10 random characters in tObj value
   m50         => ~50% match between pObjs & tObjs
   v1kto1k     => volume 1,00: 1,00 unique pObj objects against 1,000 unique tObj objects; filter tests filter each pObj to 1000 tObjs; match tests go 1:1
f13 : filter_k1to1_pWord_tWord_m50_v100to100
   filter      => filter test using makeFilterFn()
   k1to1       => 1 pObj property matched to tObj with 1 property
   pWord       => 3 to 10 random characters in pObj value
   tWord       => 3 to 10 random characters in tObj value
   m50         => ~50% match between pObjs & tObjs
   v100to100   => volume 100: 100 unique pObj objects, 100 unique tObj objects; filter tests filter each pObj to 100 tObjs; match tests go 1:1
f14 : filter_k1to1_pWord_tWord_m50_v1kto1k
   filter      => filter test using makeFilterFn()
   k1to1       => 1 pObj property matched to tObj with 1 property
   pWord       => 3 to 10 random characters in pObj value
   tWord       => 3 to 10 random characters in tObj value
   m50         => ~50% match between pObjs & tObjs
   v1kto1k     => volume 1,00: 1,00 unique pObj objects against 1,000 unique tObj objects; filter tests filter each pObj to 1000 tObjs; match tests go 1:1
ms1 : matchSimple_k1to100_m50_v100to100
   matchSimple => match test calling matches() directly withou creating makeMatchFn()
   k1to100     => 1 pObj property matched against 1 tObj prop in tObj of 100 properties
   m50         => ~50% match between pObjs & tObjs
   v100to100   => volume 100: 100 unique pObj objects, 100 unique tObj objects; filter tests filter each pObj to 100 tObjs; match tests go 1:1
ms2 : matchSimple_k1to100_m50_v1kto1k
   matchSimple => match test calling matches() directly withou creating makeMatchFn()
   k1to100     => 1 pObj property matched against 1 tObj prop in tObj of 100 properties
   m50         => ~50% match between pObjs & tObjs
   v1kto1k     => volume 1,00: 1,00 unique pObj objects against 1,000 unique tObj objects; filter tests filter each pObj to 1000 tObjs; match tests go 1:1
ms3 : matchSimple_k1to1_pWord_tWord_m50_v100to100
   matchSimple => match test calling matches() directly withou creating makeMatchFn()
   k1to1       => 1 pObj property matched to tObj with 1 property
   pWord       => 3 to 10 random characters in pObj value
   tWord       => 3 to 10 random characters in tObj value
   m50         => ~50% match between pObjs & tObjs
   v100to100   => volume 100: 100 unique pObj objects, 100 unique tObj objects; filter tests filter each pObj to 100 tObjs; match tests go 1:1
ms4 : matchSimple_k1to1_pWord_tWord_m50_v1kto1k
   matchSimple => match test calling matches() directly withou creating makeMatchFn()
   k1to1       => 1 pObj property matched to tObj with 1 property
   pWord       => 3 to 10 random characters in pObj value
   tWord       => 3 to 10 random characters in tObj value
   m50         => ~50% match between pObjs & tObjs
   v1kto1k     => volume 1,00: 1,00 unique pObj objects against 1,000 unique tObj objects; filter tests filter each pObj to 1000 tObjs; match tests go 1:1
m1 : match_k100to100_m100_v100to100
   match       => match test using match from create makeMatchFn()
   k100to100   => 100 pObj properties matched against 100 tObj props in tObj of 100 properties
   m100        => 100% match between pObjs & tObjs
   v100to100   => volume 100: 100 unique pObj objects, 100 unique tObj objects; filter tests filter each pObj to 100 tObjs; match tests go 1:1
m2 : match_k100to100_m100_v1kto1k
   match       => match test using match from create makeMatchFn()
   k100to100   => 100 pObj properties matched against 100 tObj props in tObj of 100 properties
   m100        => 100% match between pObjs & tObjs
   v1kto1k     => volume 1,00: 1,00 unique pObj objects against 1,000 unique tObj objects; filter tests filter each pObj to 1000 tObjs; match tests go 1:1
m3 : match_k10to100_m50_v100to100
   match       => match test using match from create makeMatchFn()
   k10to100    => 10 pObj properties matched against 10 tObj props in tObj of 100 properties
   m50         => ~50% match between pObjs & tObjs
   v100to100   => volume 100: 100 unique pObj objects, 100 unique tObj objects; filter tests filter each pObj to 100 tObjs; match tests go 1:1
m4 : match_k10to100_m50_v1kto1k
   match       => match test using match from create makeMatchFn()
   k10to100    => 10 pObj properties matched against 10 tObj props in tObj of 100 properties
   m50         => ~50% match between pObjs & tObjs
   v1kto1k     => volume 1,00: 1,00 unique pObj objects against 1,000 unique tObj objects; filter tests filter each pObj to 1000 tObjs; match tests go 1:1
m5 : match_k1to100_m50_v100to100
   match       => match test using match from create makeMatchFn()
   k1to100     => 1 pObj property matched against 1 tObj prop in tObj of 100 properties
   m50         => ~50% match between pObjs & tObjs
   v100to100   => volume 100: 100 unique pObj objects, 100 unique tObj objects; filter tests filter each pObj to 100 tObjs; match tests go 1:1
m6 : match_k1to100_m50_v1kto1k
   match       => match test using match from create makeMatchFn()
   k1to100     => 1 pObj property matched against 1 tObj prop in tObj of 100 properties
   m50         => ~50% match between pObjs & tObjs
   v1kto1k     => volume 1,00: 1,00 unique pObj objects against 1,000 unique tObj objects; filter tests filter each pObj to 1000 tObjs; match tests go 1:1
m7 : match_k1to1_pParagraph_tParagraph_m50_v100to100
   match       => match test using match from create makeMatchFn()
   k1to1       => 1 pObj property matched to tObj with 1 property
   pParagraph  => pObj is a string of of 5-200 'words' of random 3-10 chars seperated by spaces
   tParagraph  => pObj is a string of of 5-200 'words' of random 3-10 chars seperated by spaces
   m50         => ~50% match between pObjs & tObjs
   v100to100   => volume 100: 100 unique pObj objects, 100 unique tObj objects; filter tests filter each pObj to 100 tObjs; match tests go 1:1
m8 : match_k1to1_pParagraph_tParagraph_m50_v1kto1k
   match       => match test using match from create makeMatchFn()
   k1to1       => 1 pObj property matched to tObj with 1 property
   pParagraph  => pObj is a string of of 5-200 'words' of random 3-10 chars seperated by spaces
   tParagraph  => pObj is a string of of 5-200 'words' of random 3-10 chars seperated by spaces
   m50         => ~50% match between pObjs & tObjs
   v1kto1k     => volume 1,00: 1,00 unique pObj objects against 1,000 unique tObj objects; filter tests filter each pObj to 1000 tObjs; match tests go 1:1
m9 : match_k1to1_pString_tString_m50_v100to100
   match       => match test using match from create makeMatchFn()
   k1to1       => 1 pObj property matched to tObj with 1 property
   pString     => pObj is a string of 30 to 150 random characters
   tString     => tObj is a string of 30 to 150 random characters
   m50         => ~50% match between pObjs & tObjs
   v100to100   => volume 100: 100 unique pObj objects, 100 unique tObj objects; filter tests filter each pObj to 100 tObjs; match tests go 1:1
m10 : match_k1to1_pString_tString_m50_v1kto1k
   match       => match test using match from create makeMatchFn()
   k1to1       => 1 pObj property matched to tObj with 1 property
   pString     => pObj is a string of 30 to 150 random characters
   tString     => tObj is a string of 30 to 150 random characters
   m50         => ~50% match between pObjs & tObjs
   v1kto1k     => volume 1,00: 1,00 unique pObj objects against 1,000 unique tObj objects; filter tests filter each pObj to 1000 tObjs; match tests go 1:1
m11 : match_k1to1_pWord_tWord_m50_v100to100
   match       => match test using match from create makeMatchFn()
   k1to1       => 1 pObj property matched to tObj with 1 property
   pWord       => 3 to 10 random characters in pObj value
   tWord       => 3 to 10 random characters in tObj value
   m50         => ~50% match between pObjs & tObjs
   v100to100   => volume 100: 100 unique pObj objects, 100 unique tObj objects; filter tests filter each pObj to 100 tObjs; match tests go 1:1
m12 : match_k1to1_pWord_tWord_m50_v1kto1k
   match       => match test using match from create makeMatchFn()
   k1to1       => 1 pObj property matched to tObj with 1 property
   pWord       => 3 to 10 random characters in pObj value
   tWord       => 3 to 10 random characters in tObj value
   m50         => ~50% match between pObjs & tObjs
   v1kto1k     => volume 1,00: 1,00 unique pObj objects against 1,000 unique tObj objects; filter tests filter each pObj to 1000 tObjs; match tests go 1:1
rm1 : regMatch_k1to1_pRegDotStar_tWord_m50_v100to100
   regMatch    => regular expression match test
   k1to1       => 1 pObj property matched to tObj with 1 property
   pRegDotStar => pObj has reg exp 1 rand char followed by .* by rand char eg /B.*l/
   tWord       => 3 to 10 random characters in tObj value
   m50         => ~50% match between pObjs & tObjs
   v100to100   => volume 100: 100 unique pObj objects, 100 unique tObj objects; filter tests filter each pObj to 100 tObjs; match tests go 1:1
rm2 : regMatch_k1to1_pRegDotStar_tWord_m50_v1kto1k
   regMatch    => regular expression match test
   k1to1       => 1 pObj property matched to tObj with 1 property
   pRegDotStar => pObj has reg exp 1 rand char followed by .* by rand char eg /B.*l/
   tWord       => 3 to 10 random characters in tObj value
   m50         => ~50% match between pObjs & tObjs
   v1kto1k     => volume 1,00: 1,00 unique pObj objects against 1,000 unique tObj objects; filter tests filter each pObj to 1000 tObjs; match tests go 1:1
rm3 : regMatch_k1to1_pRegDot_tWord_m50_v100to100
   regMatch    => regular expression match test
   k1to1       => 1 pObj property matched to tObj with 1 property
   pRegDot     => pObj has one character replaced with . for reg exp test
   tWord       => 3 to 10 random characters in tObj value
   m50         => ~50% match between pObjs & tObjs
   v100to100   => volume 100: 100 unique pObj objects, 100 unique tObj objects; filter tests filter each pObj to 100 tObjs; match tests go 1:1
rm4 : regMatch_k1to1_pRegDot_tWord_m50_v1kto1k
   regMatch    => regular expression match test
   k1to1       => 1 pObj property matched to tObj with 1 property
   pRegDot     => pObj has one character replaced with . for reg exp test
   tWord       => 3 to 10 random characters in tObj value
   m50         => ~50% match between pObjs & tObjs
   v1kto1k     => volume 1,00: 1,00 unique pObj objects against 1,000 unique tObj objects; filter tests filter each pObj to 1000 tObjs; match tests go 1:1
rm5 : regMatch_k1to1_pRegMidStr_tWord_m50_v100to100
   regMatch    => regular expression match test
   k1to1       => 1 pObj property matched to tObj with 1 property
   pRegMidStr  => pObj has a random number of consecutive characters from tObj string; eg /anke/
   tWord       => 3 to 10 random characters in tObj value
   m50         => ~50% match between pObjs & tObjs
   v100to100   => volume 100: 100 unique pObj objects, 100 unique tObj objects; filter tests filter each pObj to 100 tObjs; match tests go 1:1
rm6 : regMatch_k1to1_pRegMidStr_tWord_m50_v1kto1k
   regMatch    => regular expression match test
   k1to1       => 1 pObj property matched to tObj with 1 property
   pRegMidStr  => pObj has a random number of consecutive characters from tObj string; eg /anke/
   tWord       => 3 to 10 random characters in tObj value
   m50         => ~50% match between pObjs & tObjs
   v1kto1k     => volume 1,00: 1,00 unique pObj objects against 1,000 unique tObj objects; filter tests filter each pObj to 1000 tObjs; match tests go 1:1
rm7 : regMatch_k1to1_pRegPhone_tPhone_m50_v100to100
   regMatch    => regular expression match test
   k1to1       => 1 pObj property matched to tObj with 1 property
   pRegPhone   => pObj is a regular expression that tests for phone format
   tPhone      => tObj is a phone number of various possible accepted formats
   m50         => ~50% match between pObjs & tObjs
   v100to100   => volume 100: 100 unique pObj objects, 100 unique tObj objects; filter tests filter each pObj to 100 tObjs; match tests go 1:1
rm8 : regMatch_k1to1_pRegPhone_tPhone_m50_v1kto1k
   regMatch    => regular expression match test
   k1to1       => 1 pObj property matched to tObj with 1 property
   pRegPhone   => pObj is a regular expression that tests for phone format
   tPhone      => tObj is a phone number of various possible accepted formats
   m50         => ~50% match between pObjs & tObjs
   v1kto1k     => volume 1,00: 1,00 unique pObj objects against 1,000 unique tObj objects; filter tests filter each pObj to 1000 tObjs; match tests go 1:1

